From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: tr7zw <tr7zw@live.de>
Date: Sat, 1 Aug 2020 15:55:15 -0500
Subject: [PATCH] Add NBT API as a first-class lib

Original code by YatopiaMC, licensed under MIT
You can find the original code on https://github.com/YatopiaMC/Yatopia

diff --git a/build.gradle.kts b/build.gradle.kts
index 3a1c5a4aa8d512d50565b22a383e44b73b276ee5..40020c860dac02cf678987cce78e8d50c105a365 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,6 +1,7 @@
 plugins {
     `java-library`
     `maven-publish`
+    id("com.github.johnrengelman.shadow")
 }
 
 java {
@@ -42,6 +43,7 @@ dependencies {
     api("org.apache.logging.log4j:log4j-api:2.17.1")
     api("org.slf4j:slf4j-api:1.8.0-beta4")
     api("io.sentry:sentry:5.4.0") // Pufferfish
+    api("de.tr7zw:item-nbt-api:2.9.2") // Yatopia
 
     implementation("org.ow2.asm:asm:9.2")
     implementation("org.ow2.asm:asm-commons:9.2")
@@ -102,6 +104,10 @@ tasks.jar {
     }
 }
 
+tasks.shadowJar {
+    relocate("de.tr7zw.changeme.nbtapi", "de.tr7zw.nbtapi")
+}
+
 tasks.withType<Javadoc> {
     val options = options as StandardJavadocDocletOptions
     options.overview = "src/main/javadoc/overview.html"
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 049c36807d2a970842442c1b7517c06f3f150041..8bc45dcb8b739045cf4d867f2ea34488a4f59281 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -283,4 +283,16 @@ public interface Chunk extends PersistentDataHolder {
      * @return if the block is contained within
      */
     boolean contains(@NotNull BlockData block);
+
+    // Yatopia start
+    /**
+     * Returns a custom tag container of this chunk.
+     *
+     * @return custom NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTCompound getNBTC() {
+        return new de.tr7zw.changeme.nbtapi.NBTChunk(this).getPersistentDataContainer();
+    }
+    // Yatopia end
 }
diff --git a/src/main/java/org/bukkit/block/TileState.java b/src/main/java/org/bukkit/block/TileState.java
index 5c8517c5bcae10161952c104b6a4ff7c713bcdbd..bfe1c93caa4d3bb89e5e49c5b5988ddf042f798c 100644
--- a/src/main/java/org/bukkit/block/TileState.java
+++ b/src/main/java/org/bukkit/block/TileState.java
@@ -37,6 +37,28 @@ public interface TileState extends BlockState, PersistentDataHolder {
     @Override
     PersistentDataContainer getPersistentDataContainer();
 
+    // Yatopia start
+    /**
+     * Returns NBT representation of this tile entity.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTTileEntity getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTTileEntity(this);
+    }
+
+    /**
+     * Returns a custom tag container of this tile entity.
+     *
+     * @return custom NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTCompound getNBTC() {
+        return getNBT().getPersistentDataContainer();
+    }
+    // Yatopia end
+
     // Paper start
     /**
      * Checks if this TileState is a snapshot or a live
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 8bc6876c82935988436597161fa0ec94c032174b..853fe4a484478f4c86a64159f61a6dd9b5a61163 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -190,6 +190,28 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     }
     // Paper end
 
+    // Yatopia start
+    /**
+     * Returns NBT representation of this entity.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTEntity getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTEntity(this);
+    }
+
+    /**
+     * Returns a custom tag container of this entity.
+     *
+     * @return custom NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTCompound getNBTC() {
+        return getNBT().getPersistentDataContainer();
+    }
+    // Yatopia end
+
     /**
      * Returns a list of entities within a bounding box centered around this
      * entity
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 56897cfb96b53e43fec343568e514ee636ddd5c5..42af0c2d3943d1c239cca0e900ec2a07f03d141c 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -587,6 +587,44 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     }
     // Paper end
 
+    // Yatopia start
+    /**
+     * Returns NBT representation of this item. The ItemStack will be cloned!
+     *
+     * @return item's NBT tags container
+     */
+    @NotNull
+    public de.tr7zw.changeme.nbtapi.NBTItem getNBT() {
+        return getNBT(false);
+    }
+
+    /**
+    * Returns NBT representation of this item. If directApply is true,
+    * all changes will be mapped to the original item. Changes to the NBTItem will
+    * overwrite changes done to the original item in that case.
+    *
+    * @param directApply if true, changes to NBTItem will affect this ItemStack
+    * @return item's NBT tags container
+    */
+    @NotNull
+    public de.tr7zw.changeme.nbtapi.NBTItem getNBT(boolean directApply) {
+        return new de.tr7zw.changeme.nbtapi.NBTItem(this, directApply);
+    }
+
+    /**
+     * Applies NBT data from the provided NBT item.
+     *
+     * @param nbt ItemStack's NBT container
+     */
+    public void setNBT(@NotNull de.tr7zw.changeme.nbtapi.NBTItem nbt) {
+        ItemStack nbtItem = nbt.getItem();
+        setType(nbtItem.getType());
+        setAmount(nbtItem.getAmount());
+        setData(nbtItem.getData());
+        setItemMeta(nbtItem.getItemMeta());
+    }
+    // Yatopia end
+
     /**
      * Get a copy of this ItemStack's {@link ItemMeta}.
      *
